'use client'
import type { Bookmark } from '@/types'
import { useState, useEffect, useCallback, useRef } from 'react'

import { pdfjs, Document, Page, Outline } from 'react-pdf'
import 'react-pdf/dist/Page/AnnotationLayer.css'
import 'react-pdf/dist/Page/TextLayer.css'

import { TypedObject } from '@portabletext/types'

import NextButton from '@/app/components/NextButton'
import Sidebar from '@/app/components/Sidebar'
import Loader from '@/app/components/Loader'

pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`

export default function Reader({
  file, info, bookmark
}:{
  file: string
  info: TypedObject
  bookmark: Bookmark[]
}) {
  const currentRef = useRef<HTMLDivElement>(null)
  const zoomRef = useRef<HTMLDivElement>(null)

  const pageWrapperRef = useRef<HTMLDivElement>(null)
  const documentRef = useRef<HTMLDivElement>(null)

  const [ selected, setSelected ] = useState<string>('')
  const [ numPages, setNumPages ] = useState<number>(0)
  const [ pageNumber, setPageNumber ] = useState<number>(1)
  const [ spreadWidth, setSpreadWidth ] = useState<number>(0)

  const [ isPinching, setIsPinching ] = useState<boolean>(false)
  const [ isTouchMoving, setIsTouchMoving ] = useState<boolean>(false)
  const [ isDragging, setIsDragging ] = useState<boolean>(false)
  const [ initialDistance, setInitialDistance ] = useState<number>(0)
  const [ initialScale, setInitialScale ] = useState<number>(1)
  const [ distance, setDistance ] = useState<string>('')
  const [ scale, setScale ] = useState<number>(1)
  const [ startX, setStartX ] = useState<number>(0)
  const [ startY, setStartY ] = useState<number>(0)
  const [ initialX, setInitialX ] = useState<number>(0)
  const [ initialY, setInitialY ] = useState<number>(0)
  const [ offsetX, setOffsetX ] = useState<number>(0)
  const [ offsetY, setOffsetY ] = useState<number>(0)

  const [ start, setStart ] = useState<array>({})
  const [ transformed, setTransformed ] = useState<string>('')

  useEffect(() => {
    const handleResize = () => {
      if (currentRef.current) {
        setSpreadWidth(currentRef.current.offsetWidth)
      }
    }

    window.addEventListener('resize', handleResize)

    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [])

  useEffect(() => {
    function handleGestureOutside(e: any) {
      if (zoomRef.current && !zoomRef.current.contains(e.target)) {
        e.preventDefault()
      }
    }

    // Calculate distance between two fingers
    function getDistance(touch1, touch2) {
      const xDiff = touch2.pageX - touch1.pageX
      const yDiff = touch2.pageY - touch1.pageY
      return Math.sqrt(xDiff * xDiff + yDiff * yDiff)
    }

    let smoothFactor = 0

    if (zoomRef.current) {
      zoomRef.current.addEventListener('touchstart', function(e:any) {
        if (zoomRef.current && zoomRef.current.contains(e.target)) {
          if (e.touches.length === 2) {
            setIsPinching(true)

            setInitialDistance(getDistance(e.touches[0], e.touches[1]))
            setInitialScale(scale)
          } else if (e.touches.length === 1) {
            setIsDragging(true)
            setInitialX(e.touches[0].clientX - offsetX)
            setInitialY(e.touches[0].clientY - offsetY)
          }
        }
      })

      zoomRef.current.addEventListener('touchmove', function(e: any) {
        if (isPinching && e.touches.length === 2) {
          const currentDistance = getDistance(e.touches[0], e.touches[1])
          const scaleChange = currentDistance / initialDistance

          setScale(Math.min(Math.max(1, initialScale * scaleChange), 3.5))
          setStartX(e.clientX - initialX)
          setStartY(e.clientY - initialY)


          // Apply the scaling
          // zoomRef.current.style.transform = `scale(${scale}) translate(${startX}px, ${startY}px)`

          // Applying smooth zooming with throttling to reduce flicker
          if (!isTouchMoving) {
            setIsTouchMoving(true)
            requestAnimationFrame(() => {
              zoomRef.current.style.transform = `scale(${scale}) translate(${offsetX}px, ${offsetY}px)`;
              setIsTouchMoving(false)
            });
          }

          // Prevent default behavior (scrolling)
          e.preventDefault()
        } else if (isDragging && e.touches.length === 1) {
          setOffsetX(e.touches[0].clientX - initialX)
          setOffsetY(e.touches[0].clientY - initialY)

          zoomRef.current.style.transform = `scale(${scale}) translate(${offsetX}px, ${offsetY}px)`;

          e.preventDefault()
        }
      })

      zoomRef.current.addEventListener('touchend', (e: any) => {
        setIsPinching(false)
        setIsDragging(false)
      });

      // Mouse events for dragging after pinch zoom
      // zoomRef.current.addEventListener('mousedown', (e: any) => {
      //   setInitialX(e.clientX - startX)
      //   setInitialY(e.clientY - startY)
      //   zoomRef.current.addEventListener('mousemove', dragImage)
      //   zoomRef.current.addEventListener('mouseup', stopDragging)
      // })

      // function dragImage(e) {
      //   setStartX(e.clientX - initialX)
      //   setStartY(e.clientY - initialY)
      //   zoomRef.current.style.transform = `scale(${scale}) translate(${startX}px, ${startY}px)`
      // }
      // function stopDragging() {
      //   zoomRef.current.removeEventListener('mousemove', dragImage)
      //   zoomRef.current.removeEventListener('mouseup', stopDragging)
      // }

      // zoomRef.current.addEventListener('touchend', function(event: any) {
      //     // Reset image to it's original format
      //     zoomRef.current.style.transform = ""
      //     zoomRef.current.style.WebkitTransform = ""
      //     zoomRef.current.style.zIndex = ""

      //     //reset initialLoad and translateX and translateY needed to apply the existing transform on image
      //     initialLoad = true
      //     translateX = 0
      //     translateY = 0
      // })
 

    /* Zoom Start */
    // function handleZoomStart(event: any) { 
    //   if (currentRef.current && currentRef.current.contains(event.target)) {
    //     if (event.touches.length === 2) {
    //       event.preventDefault(); // Prevent page scroll

    //       // Calculate where the fingers have started on the X and Y axis
    //       start.x = (event.touches[0].pageX + event.touches[1].pageX) / 2
    //       start.y = (event.touches[0].pageY + event.touches[1].pageY) / 2
    //       start.distance = distance(event)
    //     }
    //   }
    // }
    /* Zoom Move */
    // function handleZoomMove(event: any) {

    //     if (event.touches.length === 2) {
    //       event.preventDefault(); // Prevent page scroll

    //       // Safari provides event.scale as two fingers move on the screen
    //       // For other browsers just calculate the scale manually
    //       let scale;
    //       if (event.scale) {
    //         scale = event.scale;
    //       } else {
    //         const deltaDistance = distance(event);
    //         scale = deltaDistance / start.distance;
    //       }
    //       imageElementScale = Math.min(Math.max(1, scale), 4);
          
    //       // Check if it's the initial load
    //       if (initialLoad) {
    //         // Get the existing transform style property for proper calculations
    //         var style = window.getComputedStyle(event.target);
    //         const existingTransform = style.getPropertyValue('transform');

    //         if(existingTransform.toString() !== "none") {
    //           const rect = event.target.getBoundingClientRect();
    //           translateX = -rect.width / 2;
    //           translateY = -rect.height / 2;
    //         }
    //         initialLoad = false; // Update the flag to indicate initial load has occurred
    //       }

    //       // Calculate how much the fingers have moved on the X and Y axis
    //       const deltaX = (((event.touches[0].pageX + event.touches[1].pageX) / 2) - start.x) * 2; // x2 for accelerated movement
    //       const deltaY = (((event.touches[0].pageY + event.touches[1].pageY) / 2) - start.y) * 2; // x2 for accelerated movement

    //       // Combine the existing transform with the additional calculations
    //       const transform = `translate3d(` + (translateX + deltaX) + `px, ` + (translateY + deltaY) + `px, 0) scale(` + imageElementScale + `)`;
    //       event.target.style.transform = transform;
        
    //       event.target.style.WebkitTransform = transform;
    //       event.target.style.zIndex = "9999";
    //     }
    // }

    /* Zoom End */
    // function handleZoomEnd(event: any) {
    //   // Reset image to it's original format
    //   event.target.style.transform = ""
    //   event.target.style.WebkitTransform = ""
    //   event.target.style.zIndex = ""

    //   //reset initialLoad and translateX and translateY needed to apply the existing transform on image
    //   initialLoad = true
    //   translateX = 0
    //   translateY = 0
    // }
    }

    // Bind the event listener
    document.addEventListener('wheel', handleGestureOutside)
    document.addEventListener('gesturestart', handleGestureOutside)
    // document.addEventListener('gesturestart', handleGestureOutside)

    // document.addEventListener("touchstart", handleZoomStart)
    // document.addEventListener("touchmove", handleZoomMove)
    // document.addEventListener("touchend", handleZoomEnd)

    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener('wheel', handleGestureOutside)
      document.removeEventListener('gesturestart', handleGestureOutside)
  
      // document.removeEventListener("touchstart", handleZoomStart)
      // document.removeEventListener("touchmove", handleZoomMove)
      // document.removeEventListener("touchend", handleZoomEnd)
    }
  })

  const renderPage = useCallback((pageNum: number) => {
    return (
      <Page
        key={pageNum}
        pageNumber={pageNum}
        width={700}
        loading={<div className="flex w-1/2"><Loader /></div>}
        className={`overflow-hidden ${pageNum === pageNumber ? 'left' : 'right'}`}
        scale={1.5}
      />
    )
  }, [pageNumber])
  
  const onDocumentLoadSuccess = (pdf: any): void  => {
    setNumPages(pdf.numPages)

    if (currentRef.current) {
      setSpreadWidth(currentRef.current.offsetWidth)
    }
  }

  const onPageChange = ( newPageNumber: number, direction : string ) => {
    if (newPageNumber !== pageNumber) {
      setDistance(0)
      zoomRef.current.style.transform = 'unset'

      // setTransitioning(direction)

      if (pageWrapperRef.current ) {
        pageWrapperRef.current.style.transform = `translateX(-${(newPageNumber-1) * (spreadWidth/2)}px)`
      }

      setTimeout(() => {
        setPageNumber(newPageNumber)

        // setTransitioning('')
      }, 300)
    }
  }

  const onClickOutline = ({ 
    pageIndex, pageNumber
  } : {
    pageIndex: number
    pageNumber: number
  }) => {
    if (pageIndex !== pageNumber) {
      onPageChange(pageIndex, 'next')
      setSelected('')
    }
  }

  return(
    <div className="relative flex justify-center">
      {/* <div className="fixed hidden left-0 top-0 text-white z-50"> */}
      <div className="hidden fixed left-0 top-0 text-white z-50">
        Current: {pageNumber} / {pageNumber+1}
        pageNumber: {pageNumber} /
        numPage: {numPages} /
        spreadWidth: {spreadWidth} /
      </div>
      <div className="fixed flex flex-col bg-black left-0 top-0 text-white z-50">
        <div>initialDistance: {initialDistance}</div>
        <div>Distance: {distance}</div>
        <div>Scale: {scale}</div>
        <div>StartX: {startX}</div>
        <div>StartY: {startY}</div>
        <div>InitialX: {initialX}</div>
        <div>InitialY: {initialY}</div>
        <div>Transformed: {transformed}</div>
      </div>
      
      <div ref={currentRef} className="reader h-screen w-[82vw] flex items-center justify-center overflow-hidden overflow-x-auto z-10">
        <Document 
          file={file}
          inputRef={documentRef}
          onLoadSuccess={onDocumentLoadSuccess}
          // onItemClick={onClickOutline}
          loading={<Loader />}
          className="flex items-center justify-center h-full w-full overflow-hidden relative text-white"
        >
          <div ref={zoomRef} className="flex items-center h-full overflow-hidden relative transition">
          <div
            id="page-wrapper"
            ref={pageWrapperRef}
            className="page-wrapper flex items-center h-full relative transition"
            style={{ width: numPages*spreadWidth + 'px'}}
          >
            {Array.apply(null, Array(numPages))
              .map((x, i)=>i+1)
              .map((item, index) => (
                item >= pageNumber - 4 && item <= pageNumber + 5 &&
                <div
                  key={index}
                  className={`page-container overflow-hidden`}
                  // value={index * spreadWidth}
                  style={{ transform: 'translateX('+ (item-1) * spreadWidth/2 + 'px)' }}
                >
                  {renderPage(item)}
                </div>
              ))
            }
          </div>
          </div>

          {/* Outline */}
          <Sidebar
            about={info}
            bookmark={bookmark}
            toc={
              <Outline onItemClick={onClickOutline} />
            }
            selected={selected}
            setSelected={setSelected}
            onPageChange={onPageChange}
            pageNumber={pageNumber}
          />
        </Document>
      </div>

      {/* Controls */}
      <button 
        className="nav-button absolute flex h-screen items-center left-0 top-0 px-4 rotate-180" 
        onClick={() => { 
          onPageChange(pageNumber - 2, 'prev')
        }}
        disabled={pageNumber === 1}
      >
        <NextButton />
      </button>
      <button 
        className="nav-button absolute flex items-center h-screen right-0 top-0 px-4" 
        onClick={() => { 
          onPageChange(pageNumber + 2, 'next')
        } }
        disabled={pageNumber >= numPages}
      >
        <NextButton />
      </button>
      {/* / Control */}
    </div>
  )
}